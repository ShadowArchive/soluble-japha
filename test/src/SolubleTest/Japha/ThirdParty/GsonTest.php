<?php

namespace SolubleTest\Japha\ThirdParty;

use Soluble\Japha\Bridge\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-04 at 16:47:42.
 */
class GsonTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var string
     */
    protected $servlet_address;

    /**
     * @var Adapter
     */
    protected $adapter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if (!$this->isGSONTestsEnabled()) {
            $this->markTestSkipped(
                'Skipping GSON tests, enable option in phpunit.xml'
            );
        }

        \SolubleTestFactories::startJavaBridgeServer();

        $this->servlet_address = \SolubleTestFactories::getJavaBridgeServerAddress();

        $this->adapter = new Adapter([
            'driver' => 'Pjb62',
            'servlet_address' => $this->servlet_address,
        ]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    protected function isGSONTestsEnabled()
    {
        return isset($_SERVER['JAPHA_ENABLE_GSON_TESTS']) &&
            $_SERVER['JAPHA_ENABLE_GSON_TESTS'] == true;
    }

    /**
     * @see https://github.com/google/gson
     */
    public function testJavaSimpleJsonSerialization()
    {
        $ba = $this->adapter;

        /*
        $jsonWriter = $ba->javaClass('com.cedarsoftware.util.io.JsonWriter');

        $string = $ba->java('java.lang.String', 'Hello world');

        $encoded = $jsonWriter->objectToJson($string);

        $this->assertEquals('"Hello world"', (string) $encoded);

        $hashMap = $ba->java('java.util.HashMap', ['test' => 1, 'name' => 'cool']);

        $encoded = $jsonWriter->objectToJson($hashMap);

        $this->assertEquals('{"@type":"java.util.HashMap","test":{"@type":"int","value":1},"name":"cool"}', (string) $encoded);
        */
    }
}
