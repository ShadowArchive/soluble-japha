<?php

namespace SolubleTest\Japha\ThirdParty;

use Soluble\Japha\Bridge\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-04 at 16:47:42.
 */
class JsonIoTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var string
     */
    protected $servlet_address;

    /**
     * @var Adapter
     */
    protected $adapter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if (!$this->isJsonIoTestsEnabled()) {
            $this->markTestSkipped(
                'Skipping JSONIO tests, enable option in phpunit.xml'
            );
        }
        \SolubleTestFactories::startJavaBridgeServer();
        $this->servlet_address = \SolubleTestFactories::getJavaBridgeServerAddress();
        $this->adapter = new Adapter([
            'driver' => 'Pjb62',
            'servlet_address' => $this->servlet_address,
        ]);
    }

    /**
     * @see https://github.com/jdereg/json-io
     */
    public function testJavaSimpleJsonSerialization()
    {
        $ba = $this->adapter;
        $jsonWriter = $ba->javaClass('com.cedarsoftware.util.io.JsonWriter');

        $string = $ba->java('java.lang.String', 'Hello world');
        $encoded = $jsonWriter->objectToJson($string);
        $this->assertEquals('"Hello world"', (string) $encoded);
    }

    public function testObjectJsonSerialization()
    {
        $ba = $this->adapter;
        $jsonWriter = $ba->javaClass('com.cedarsoftware.util.io.JsonWriter');

        $date = '2017-05-20';
        $simpleDateFormat = $ba->java('java.text.SimpleDateFormat', 'yyyy-MM-dd');
        $javaDate = $simpleDateFormat->parse($date); // This is a Java date

        $hashMap = $ba->java('java.util.HashMap', [
            'integer' => 1,
            'phpstring' => "I'm a php string",
            'javastring' => $ba->java('java.lang.String', "I'm a Java string"),
            'javadate' => $javaDate
        ]);

        $jsonString = (string) $jsonWriter->objectToJson($hashMap);

        $this->assertJson($jsonString);
        $this->assertEquals('{"@type":"java.util.HashMap","javastring":"I\'m a Java string","javadate":{"@type":"date","value":1495231200000},"phpstring":"I\'m a php string","integer":{"@type":"int","value":1}}', $jsonString);

        $decoded = json_decode($jsonString);
        $this->assertEquals('date', $decoded->javadate->{'@type'});
    }

    protected function isJsonIoTestsEnabled()
    {
        return isset($_SERVER['JAPHA_ENABLE_JSONIO_TESTS']) &&
            $_SERVER['JAPHA_ENABLE_JSONIO_TESTS'] == true;
    }
}
