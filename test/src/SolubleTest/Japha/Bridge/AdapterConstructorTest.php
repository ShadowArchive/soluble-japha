<?php

namespace SolubleTest\Japha\Bridge;

use Soluble\Japha\Bridge\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-04 at 16:47:42.
 */
class AdapterConstructorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var string
     */
    protected $servlet_address;

    /**
     * @var Adapter
     */
    protected $adapter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        \SolubleTestFactories::startJavaBridgeServer();
        $this->servlet_address = \SolubleTestFactories::getJavaBridgeServerAddress();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testConstructorThrowsUnsupportedDriverException()
    {
        $this->setExpectedException('Soluble\Japha\Bridge\Exception\UnsupportedDriverException');
        $ba = new Adapter([
            'driver' => 'InvalidDriver'
        ]);
    }

    public function testConstructorThrowsInvalidArgumentException()
    {
        $this->setExpectedException('Soluble\Japha\Bridge\Exception\InvalidArgumentException');

        $ba = new Adapter([
            'driver' => 'Pjb62',
            'missing_servlet_address' => ''
        ]);
    }

    public function testConstructorThrowsInvalidArgumentException2()
    {
        $this->setExpectedException('Soluble\Japha\Bridge\Exception\InvalidArgumentException');
        $ba = new Adapter([
            'driver' => 'Pjb62',
            'servlet_address' => 'an invalid url'
        ]);
    }

/*
    public function testConstructorSetsDefaultTimeZone()
    {
        $ba = new Adapter(array(
            'driver' => 'Pjb62',
            'servlet_address' => $this->servlet_address,
            //'java_default_timezone' =>
        ));

        $phpTz = date_default_timezone_get();
        $javaTz = $ba->getSystem()->getTimeZoneId();
        $this->assertEquals($phpTz, $javaTz);
    }
*/
    public function testConstructorSetsCustomDefaultTimeZone()
    {
        $ba = new Adapter([
            'driver' => 'Pjb62',
            'servlet_address' => $this->servlet_address,
            'java_default_timezone' => 'Europe/London'
        ]);

        $javaTz = $ba->getSystem()->getTimeZoneId();
        $this->assertEquals('Europe/London', $javaTz);
    }
}
